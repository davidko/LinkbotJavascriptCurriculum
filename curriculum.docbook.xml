<?xml version='1.0'?>
<!DOCTYPE book [
<!ENTITY LinkbotI "Linkbot&#x2011;I">
<!ENTITY LinkbotL "Linkbot&#x2011;L">
<!ENTITY ch3ex1 SYSTEM "code/ch3ex1.py">
]>
<book version="5.0" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns = "http://docbook.org/ns/docbook">
<info>
  <title>Programming the Barobo Linkbot with Javascript</title>
  <author>
    <personname><firstname>David</firstname><surname>Ko</surname></personname>
  </author>
  <author>
    <personname><firstname>Bryan</firstname><surname>Richter</surname></personname>
  </author>
  <author>
    <personname><firstname>Harris</firstname><surname>Hancock</surname></personname>
  </author>
  <author>
    <personname><firstname>Mike</firstname><surname>Challender</surname></personname>
  </author>
  <copyright><year>2014</year><holder>Barobo, Inc. </holder></copyright>
</info>

<preface><title>Preface</title>
  <para>
    Welcome to "Programming the Barobo Linkbot with Javascript". The goals of
    this book are to familiarize you with the Javascript programming language
    and essential concepts of programming robots. The book accomplishes 
    this in a "Robot-centric" manner: It teaches you how to do cool things
    with your Linkbot, and you learn computer science principles 
    along the way as a side effect of making the robot do cool things.
    This breaks the old paradigm of teaching programming, which typically
    focuses on one particular core concept, such as loops or functions,
    per chapter. At the same time, we make sure to include all of the
    important computer science concepts in this book, as well as 
    a good amount of real computer science jargon to prepare you for 
    real-world programming.
  </para> <para>
    The intended audience for this book are people with some computer
    experience and some basic math (Pre-Algebra) experience. The user
    should be familiar with the concept of files and folders, and
    opening and saving files, such as in Microsoft Word. 
    Familiarity with word processing concepts, such as copy/paste, will
    also be extremely useful when copying large parts of code from
    file to file.
    No prior 
    programming or robotics experience is required to follow this curriculum.
  </para> <para>
    Some additional software is required for you to follow along with the
    lessons in this book. The required software includes Javascript, several
    third-party Javascript packages including our own Linkbot Control package,
    and a good code editor. The easiest way to obtain, install, and setup
    all of the software is to download and install our all-in-one Javascript
    Curriculum bundle. The bundle includes:
    <itemizedlist>
      <listitem> <para>Javascript and all required and suggested Javascript packages. </para></listitem>
      <listitem> <para>PyScripter : A powerful and pretty looking code editor. </para></listitem>
      <listitem> <para>Curriculum code example programs. </para></listitem>
      <listitem> <para>Many other packages for numerical analysis, graphics, writing games, and much, much more. </para></listitem>
    </itemizedlist>
    Some users may not want to install our bundle. These include Javascript
    gurus who already have a version of Javascript installed, and other advanced
    users. For everyone else, we highly recommend you use our bundled application.
  </para>
</preface>

<chapter> <title> Introduction </title>
  <para>
    You may already have an idea of what a robot is from a variety of TV shows 
    and movies. They vary from tiny wheeled vehicles that beep and boop to
    humanoid intellegent translators such as C-3PO to gigantic transforming
    robots like Optimus Prime. To roboticists, the definition of a robot is any
    machine capable of performing a programmed task and interacting with
    its physical environment with motors, actuators, and sensors. You may
    be surprised to know that, by this definition, even your refrigerator 
    may be considered a robot! Many modern refrigerators are capable of 
    automatically making ice, maintaining a correct amount of ice in the
    freezer, and even dispensing the ice at the touch of a button. This
    machine is running a program, uses actuators to move the ice around,
    and has sensors such as buttons and temperature sensors.
  </para>
  <para>
    Indeed, robots and robotic systems have proliferated modern life, and
    as such, the study of robotics has become extremely important. In 
    addition to learning about robotics for the sake of robotics, certain
    robots are specifically designed to help teach programming, math, science, 
    physics, and even music! One such robot is the Linkbot modular robot.
    The Linkbot has been designed to be low-cost, fully-featured, tough, and
    easily programmable for day-to-day use by students and hobbyists of all 
    ages, and that is the robot that the following chapters will teach you
    how to use.
  </para>
  <para>
    This curriculum is designed to bring someone with limited programming
    experience up to speed with programming a Linkbot using the Javascript
    programming language. Javascript is a free, fully featured, and easy 
    language to learn and use. It's unique design makes it popular among
    a large spectrum of programmers from absolute beginners to code 
    wizards. It is commonly used as both an introductory language at
    universities as well as an 
    all-purpose in-house language by many major software and technology companies.
  </para>
  <!--
    <para>
      This curriculum is organized in such a way that it teaches how to make the
      robots do interesting stuff first, and teaches computer science and
      programming concepts as a side-effect of making the robot do cool things.
      As such, the chapters and sections are organized primarily by robot
      functionality rather than computer science topics, such as variables,
      loops, etc. 
    </para>
  -->
  <section> <title> Getting and Installing the Software </title>
    <para>
      This curriculum requires a fully functioning Javascript environment
      and a copy of Linkbot Labs. It is very likely you are already viewing
      this document using Linkbot Labs. If you are not, you may obtain
      Linkbot Labs from http://www.barobo.com/downloads . 
    </para> 
    <section> <title> Javascript </title>
      <section> <title> Windows </title>
        <para>
          To get Javascript up and running, we recommend downloading and installing
          our PortablePython Barobo Edition all-in-one installer at 
          http://my.barobo.com/download/windows_python_allinone_installer .
        </para>
        <para>
          Once you have downloaded the file, double click on the installer to begin 
          the installation process. You should see a screen similar to the follwing
          screenshot:
          <figure id="fig_installwindows1">
            <title> Installing PortablePython - Barobo Edition, Step 1</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="images/windows_install1.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          Click the "Next" button to continue. You should see something similar
          to the following screenshot:
          <figure id="fig_installwindows2">
            <title> Installing PortablePython - Barobo Edition, Step 2</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="images/windows_install2.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          At this point, you will need to click the "Browse" button to choose
          a location to install PortablePython. After clicking on the "Browse"
          button, you should see the following screen:
          <figure id="fig_installwindows3">
            <title> Installing PortablePython - Barobo Edition, Step 3</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="images/windows_install3.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </para>
        <para>
          On this screen, you have several options for where to install PortablePython.
          The easiest place to install it is onto your Desktop. If that is where
          you would like to install it, simply click on "Desktop" and then click
          "OK".
        </para>
        <para>
          Another popular place to install it is in your home directory. On the 
          screenshot shown, the home directory is called "dko", because that is
          the username of the current user using the computer when these
          screenshots were taken. On your computer,
          your home directory name will be your username. 
        </para>
        <para>
          Once you have installed PortablePython, you can navigate to that 
          directory using your file browser. Inside the directory, you will
          see several executables, as shown in <xref linkend="fig_install_contents"/>.
          <figure id="fig_install_contents">
            <title> PortablePython Install Contents</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="images/windows_install_contents.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          The installed contents are:
          <itemizedlist>
            <listitem> IDLE : A Javascript development environment. </listitem>
            <listitem> IPython : An interactive Javascript console. </listitem>
            <listitem> PyScripter : A Javascript development environment. </listitem>
            <listitem> Javascript : A Javascript console. </listitem>
            <listitem> QtDesigner : A graphical user interface designer, for designing window based 
              applications. </listitem>
          </itemizedlist>
        </para>
      </section> 
    </section> 
  </section> 
  <!--
  <section> <title>Exercises</title>
    <?dbhtml-include href="/home/dko/Projects/ex1.html"?>
    <qandaset>
      <qandaentry>
        <question>
          <para>What is a robot?</para>
        </question>
        <answer>
          <para>
          A robot is a programmable machine that is able to perform an 
          task which includes sensing and acting on its environment.
          </para>
        </answer>
      </qandaentry>
      <qandaentry>
        <question>
          <para>
          Is your lawn-mower a robot? Why or why not?
          </para>
        </question>
        <answer>
          <para>
          Your lawn mower is probably not considered a robot. Although it
          acts on its environment and may have sensors, it is not 
          programmable and does not perform an automated task. 
          </para>
        </answer>
      </qandaentry>
    </qandaset>
  </section>
  -->
</chapter>

<chapter> <title>Introduction to the Barobo Linkbot</title>
  <para>
  This chapter will discuss how to operate your Linkbots, including 
  tasks such as turning your Linkbot on and off and recalibrating
  your Linkbot's motors. </para>
  <figure xml:id="fig_schematic">
    <title>Linkbot Diagram and Features</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/linkbot_diagram.png"/>
      </imageobject>
    </mediaobject>
  </figure>
  <section> <title>Turning your Linkbot On and Off</title>
    <para>
    To turn your Linkbot on and off, press and hold the power button as shown
    in <xref linkend="fig_schematic"/> . When turning the robot on, 
    a purple LED will light up between the 'A' and 'B' buttons as soon as
    you press the button. Continue holding the button until that purple LED 
    turns blue. After the LED turns blue, you may release the power button.
    </para>
    <para>
    Turning off the robot follows a similar process. As you press and hold the 
    power button, the LED between buttons 'A' and 'B' will turn purple. Continue
    holding the power button until the robot turns off all LEDs and shuts off.
    </para>
  </section>
  <section> <title>Linkbot Motor Zero Positions</title>
    The Linkbot comes with a preset "Zero Position" for each of its motors.
    The following sections will show you how to check and set the zero
    position for each motor.
    <section> <title>Moving the Motors to Zero Positions</title>
      <para>
      While the robot is on, you may make the robot move its joints to its
      zero positions by pressing and releasing the 'A' and 'B' buttons
      simultaneously. The robot will move both of its motors to its zero
      positions and lock there. To release the joints, press the 'A' and 'B'
      buttons together again. This can be used to check the calibration of 
      the motors. When the joints are in their zero positions, the large
      notch on the black joint face should line up with the notch on the
      white plastic <!--, as shown in Figure <xref linkend="fig_wheelnotch"/>-->.
      </para>
      <para>
      If the notches do not line up after the robot moves to its zero positions,
      the zero positions may need to be recalibrated. The recalibration
      process is described in the next section.
      </para>
    </section>
    <section> <title>Recalibrating the Linkbot Zero Positions</title>
      To recalibrate the Linkbot zero positions, follow the following steps:
      <orderedlist>
        <listitem> Manually move the motors to their zero positions by aligning
             the notch on the motors with the notch on the while plastic
             body. <!--, as shown in Figure <xref linkend="fig_wheelnotch"/>.--> If
             the motors are locked, press and release buttons 'A' and 'B' 
             simultaneously, or power-cycle the robot to release the motors.</listitem>
        <listitem> Hold down both buttons 'A' and 'B'. After about three seconds,
             the robot will flash its LED. It has now remembered its
             current motor positions as the new "Zero" position. </listitem>
      </orderedlist>
    </section>
  </section>
  <!--
  <section> <title>Controlling a Linkbot with another Linkbot</title>
    <para> Details in this section require you to have at least two Linkbots. 
    </para>
    <section> <title>Pairing Linkbots Together and Creating Linkbot Groups</title>
      <para> To pair two linkbots together we use a process called "bump-connect"; follow these steps:
        <orderedlist>
          <listitem> Press and hold the 'B' button on the robot you want to be the controller robot. </listitem>
          <listitem> Next, press and hold the 'B' button on the robot you want to be a group member
               which will be controlled by the controller robot. </listitem>
          <listitem> Firmly (yet gently) "bump" the two robots together. Both robots should flash
               immediately. Then, after a second, the controller robot will display a blue
               LED while intermittently flashing a randomly chosen group color while the
               group member robot will display a solid group-color. The two robots are
               now paired. </listitem>
          <listitem> To add more robots to the group, follow the same steps above, except 
               make sure one of the robots is already in the group. When bump-connecting
               two robots, if one of the robots is already in a group, the other robot
               will automatically join that group.  </listitem>
        </orderedlist>
      </para>
    </section>
    <section> <title>Cycling Through Robot Control Modes</title>
      <para> There are a few ways the controller robot can be used to control the rost of
      the group member robots. Each different control mode is indicated by the color 
      of the LED on the controller robot. The modes may be cycled through by pressing 
      the 'B' button on the master robot. The control modes are: </para>
      <itemizedlist>
        <listitem> Blue: Pose Teaching Mode </listitem>
        <listitem> Green: Tilt-Drive Mode </listitem>
        <listitem> Light Blue: Copy-Cat Mode </listitem>
      </itemizedlist>
      <section> <title>Pose Teaching Mode</title>
        <para>
        In Pose Teaching mode, the robots can remember and play back a set of "poses". 
        In this mode, the 'A' button is used to record a pose, the Power button is used
        to reset all recorded poses, and the 'B' button is used to play or pause the
        poses. Note that if the 'B' button is pressed while there are no recorded poses,
        the robot will cycle to the next control method, which is Tilt-Drive mode.
        </para>
        <para>
        Typically, in this mode, the user will move the robot motors to their first 
        desired configuration and then press the 'Record' button once on any of the
        robots in the group. Then, the user will move the robots to the next desired
        position and press 'Record' again. They will repeat the process until they are
        satisfied with the number of poses and then click on the 'Play' button. The
        robots will begin by moving to the first pose, then the second, and so on
        until it reaches the last pose. Once it reaches the last pose, it automatically
        goes back to the first pose and repeats the process until the 'B' button is
        pressed again.
        </para>
      </section>
      <section> <title>Tilt-Drive Mode</title>
        <para>
        In Tilt-Drive mode, the controller robot uses its current orientation to drive
        the motors on the group-member robots. This mode is typically used with
        group-member robots that have wheels and are driving around. The controller
        robot can be tilted forward, backward, or side to side in order to drive
        the group member(s) forward, backward, or turn.
        </para>
      </section>
      <section> <title>Copy-Cat Mode</title>
        <para>
        In Copy-Cat mode, the group members all copy the motor positions on the 
        controller robot. You can move the motors on the controller robot and all
        of the group members will try to copy the controller.
        </para>
      </section>
    </section>
  </section>
  -->
</chapter>

<!--
<chapter> <title>Controlling Linkbots with BaroboLink</title>
  <para>
    BaroboLink is a computer program that allows you to connect to and 
    directly control your robots with an intuitive user-interface. It
    can also be used to locate and organize robots so that your Javascript
    programs can easily find and control robots. This chapter will familiarize
    you with BaroboLink and concepts such as connecting to robots, motor 
    positions, moving motors, and reading sensor values.
  </para>
  <section> <title>Starting BaroboLink</title>
    <para>
      In Windows, BaroboLink can usually be found in the Start menu under
      Start -> All Programs -> Barobo -> BaroboLink.
    </para>
    <para>
      On Mac OS X systems, BaroboLink can usually be found in the Finder under
      Applications -> BaroboLink
    </para>
  </section>
  <section> <title>Connecting to Robots</title>
    <para>
      <figure id="fig_barobolink_connect">
        <title> BaroboLink Connect Panel </title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/barobolink_connect.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      To connect to robots, they have to first be added to the list of known robots.
      On the connect panel, shown in Figure 
      <xref linkend="fig_barobolink_connect"/>,
      type the Serial ID of the robot you want to connect to in the entry box at the
      top and click the button labeled "Add Robot". This can be repeated for any number
      of robots. Once robots are added to the connect panel, they will be remembered
      in the future when you start BaroboLink again.
    </para>
    <para>
      Once the robots are added to the connect panel, they still need to be connected.
      To connect to a robot, first make sure that there is at least one Linkbot or
      Linkbot-Dongle connected to the computer with a Micro-USB cable. The robots
      are capable of communicating to each other wirelessly, but they cannot communicate
      wirelessly to a computer. The connected robot or dongle acts as a translator
      so that your computer can talk to the rest of your robots wirelessly.
    </para>
    <para>
      Once the robots are added to the connect panel, you may double-click on a robot
      to connect to it. When the robot connects, it should change its LED color
      to green. 
    </para>
    <para>
      If you experience any trouble during the connection process, rebooting the robots
      and BaroboLink can help. Make sure the robots are not currently connected to
      anything else, and that they are currently not paired or bumpconnected with any
      other robots.
    </para>
  </section>
  <section> <title>The Control Panel</title>
    <para>
      The "Control" panel in BaroboLink can be used to move a robot in various ways.
      Once a robot is connected to BaroboLink, the joint angles and speeds of
      the robot are displayed on the Motion Control Panel as shown in Figure
      <xref linkend="fig_control_panel"/>. The Motion Control
      Panel can be used to display information about the Linkbot's joint
      positions, and also control the speeds and positions of the Linkbot's
      joints. The panel is divided into five sections; three on the top half of
      the panel, and two on the bottom half. The functions of these five
      sections will be discussed in the next section.
    </para>
    <para>
      Note that the Control panel can only control one robot at a time. You can
      select which robot to control by clicking and selecting that robot's Serial ID
      on the Connect pane on the left-hand side of the application.
    </para>
    <section> <title>Joint Control</title>
      <para>
        This portion of the Control panel can be used to make the motors on the robot
        begin turning indefinitely. Clicking on either "up" arrow will cause that motor
        to begin rotating in the positive direction. Similarly, clicking on either
        "down" arrow will cause that motor to begin rotating in the negative 
        direction. Finally, clicking on the "stop" button will cause that motor to
        stop moving.
      </para>
    </section>
    <section> <title>Drive Control</title>
      <para>
        This portion of the Control Panel is designed to be used with a &LinkbotI; with
        two wheels attached. The buttons in this portion of the Control Panel
        make the robot drive forward, turn left and right, and drive backward.
      </para>
      <para>
        The "Zero" button makes the robot move all of its motors to its zero positions.
      </para>
      <para>
        The "Stop" button makes the robot immediately stop moving all of its motors.
      </para>
    </section>
    <section> <title>Position (degrees)</title>
      <para>
        In this portion of the Control panel, you will find two dials which represent the
        current joint positions of the two motors on the robot. The dials serve as both
        input and output. You can click an drag on the dials to move the motors on the 
        robot. You can also manually move the motors on the robot and the dials will update
        to show the current positions of each motor.
      </para>
    </section>
    <section> <title>Speed</title>
      <para>
        In this portion of the Control panel, you can modify the speed settings of each 
        motor on the robot. The speed settings determine how fast the motors move
        when using the "Joint Control" and "Drive Control" portions of the control panel.
      </para>
    </section>
  </section>
  <section> <title>The Auxiliary Control, Sensors Panel</title>
    <para>
      This panel allows you to access some other functionality on the
      Linkbot, including the buzzer, LED, and accelerometer. This dialog
      is subdivided into three sections: Buzzer Control, Accelerometer, and
      LED Color.
    </para>
    <section> <title>Buzzer Control</title>
    </section>
    <section> <title>Accelerometer</title>
    </section>
    <section> <title>LED Color</title>
    </section>
  </section>
</chapter>
-->

<!--
<chapter> <title> Controlling A Barobo Linkbot with Javascript </title>
  <section> <title> Making the Linkbot LED Blink </title>
    <para>
      All Linkbots come equipped with a controllable light called a "Light
      Emitting Diode" or LED for short. The Linkbot's LED can change both
      color and brightness. 
    </para>
    <para>
      Lets take a look at the code example in <xref linkend="code:ch3ex1"/>.
      <example id="code:ch3ex1"><title>A Simple Linkbot Program</title>
        <programlisting language="python">
&ch3ex1;
        </programlisting>
      </example>
    </para>
    <?dbhtml-include href="html/ex1.html"?>
  </section>
</chapter>
-->

<chapter> <title>Introduction to Programming Linkbots with Javascript</title>
  This chapter will help you start moving your Linkbot around. As you
  go through this section, you will see small snippets of code that
  moves the robot. If you choose, there is a link below each snippet
  that allows you to see the whole piece of Javascript code being used to
  control the robot. If you choose to see the unabridged code, you may see
  some code that you do not yet understand. Don't worry about that yet;
  We'll explain the details for that "boilerplate" code later.
  <footnote>
    <para>
    "boilerplate" code refers to code that appears at the beginning of
    many programs used for setup and configuration. Typically, boilerplate
    does not change or changes only a little bit from program to program,
    though it is required for the program to run properly.
    </para>
  </footnote>

  <section>
    <title> Linkbot Driver's Ed
    </title>
    <para>
      This section will introduce the basics to get your Linkbot moving
      with simple pieces of Javascript code. 
    </para>
    <para>
      <?dbhtml-include href="html/ch4intro.html"?>
    </para>
    <section> 
      <title> Linkbot Driver's Ed: Part 1 </title>
      <para>
        We can use the <function>move()</function> function to control a Linkbot's
        motors.
      </para>
      <?dbhtml-include href="html/ch4ex1.html"?>
      <para>
        As you may have noticed, the previous code snippet moves motor 1 one whole
        rotation (360 degrees) counter-clockwise, while the other motor(s) did not
        move at all.
      </para>
    </section>
    <section>
      <title> Linkbot Driver's Ed: Part 2 </title>
      <para>
        Now, try this:
      <?dbhtml-include href="html/ch4ex2.html"?> 
      </para>
      <para>
        Notice that the <function>move()</function> function has three arguments.
        Each argument controls how many degrees to move a particular motor:
        the first motor controls motor 1, the second controls motor 2, and
        the third controls motor 3. Not all motors are available on all
        models of Linkbot. If you have a &LinkbotI;, only motors 1 and 3 are
        available, so the second argument would be ignored. 
      </para>
      <para>
        <figure id="fig_right_hand_rule" float="1" floatstyle="right">
          <title> The right-hand rule. </title>
          <mediaobject>
            <imageobject>
              <imagedata width="1in" align="center" fileref="images/right_hand_rule.svg"/>
            </imageobject>
          </mediaobject>
        </figure>
        Also note that negative values make the robot's motor spin clockwise and
        positive values make the motor spin counter-clockwise. The choice of 
        negative values being clockwise and positive values being
        counter-clockwise follows 
        a concept known as the "right-hand rule" and is common in the fields of
        math and engineering.
      </para>
    </section>
    <section> <title> Explore </title>
      <para>
        Now that you are familiar with the <function>move()</function> function,
        let's try using it to move the robot around. Attach wheels to your 
        &LinkbotI; if you haven't already and place it on a suitable surface for
        driving around. Now, try modifying the code below and see what you can
        make the robot do!
        <?dbhtml-include href="html/ch4ex3.html"?> 
      </para>
    </section>
    <section> <title> Challenge </title>
      <orderedlist>
        <listitem>
          <para>
            Can you drive the Linkbot straight forward?
            <?dbhtml-include href="html/ch4ex4.html"?> 
          </para>
        </listitem>
        <listitem>
          <para>
            How about turning in place to the left?
            <?dbhtml-include href="html/ch4ex5.html"?>
          </para>
        </listitem>
      </orderedlist>
    </section>
  </section>
  <!--
  <section> <title>Introduction to Javascript for Computer Programming</title>
    <para>
      In the previous chapter, we learned how to control a Linkbot using the
      Control Panel. However, the Control panel requires human interaction
      to control the Linkbots. In order for the Linkbot to qualify as a
      real robot, it must be able to perform automated tasks using computer
      programs. By using computer programs to control the Linkbot, we can
      make the Linkbot solve complicated tasks or perform tasks automatically.
      Each program can be saved to a different file and different programs
      can be executed depending on what you want your robot to do. 
      Existing programs can also be modified to solve similar problems.
    </para>
    <section> <title>Getting Started with PyScripter</title>
      <para>
        PyScripter is a type of program called an "Integrated Development
        Environment (IDE)". Typically, IDE's are capable of editing code,
        displaying code in a visually appealing manner, executing code, and
        debugging code all in one program. 
      </para> <para>
        You can start PyScripter by double-clicking on the PyScripter in your
        PortablePython installation folder.
      </para>
    </section>
    <section> <title>Your First Javascript Program</title>
      <para>
        Once you have opened PyScripter, begin by creating a new program. You 
        can do this by clicking on the "New File" icon in the toolbar on
        the left hand side, or by clicking "File -> New" in the menu.
      </para><para>
        Once you have opened a new file, try typing the following code
        into the window. Make sure you type the code in exactly as shown,
        including capitalization and punctuation.
        <example id="hello.py"><title>A simple Javascript program</title>
          <programlisting>
<xi:include href="code/hello.py" parse="text"/>
          </programlisting>
        </example>
        After you have typed it in, save it to a file called "hello.py". 
        Javascript programs typically use the suffix ".py".
      </para><para>
        <figure id="fig_ninja_hello">
          <title> A Ninja-IDE Window after executing hello.py. </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/fig_ninja_hello.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        Once you have saved your new program to a file, click on the "Run File"
        icon 
        <guiicon>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/ninja_runfile.png"/>
            </imageobject>
          </inlinemediaobject>
        </guiicon>
        on the toolbar an the left-hand
        side to run your program. Ninja should pop up an output window pane
        with the results of your program, which should appear as shown in Figure
        <xref linkend="fig_ninja_hello"/>. As shown in the figure, the output of
        this program is
        <computeroutput>Hello, world!</computeroutput>
        Congratulations! You have just written and executed your first Javascript program!
      </para> <para>
        Now, lets talk about the program you just wrote. The file, "hello.py",
        is called "Source Code". Source code for most major programming languages
        is in a format called "plain text", which is the same format in ".txt"
        files, which you may already be familiar with. This bare-bones format
        cannot support any word-processor features which you may be used to, such as
        different fonts, font sizes, embedded images, etc. 
      </para> <para>
        Javascript is capable of running program directly from source code using a 
        process called "interpretation". Some other languages like C, C++, and
        Java require the source code to be first "compiled" before it can be 
        executed. The process of compilation is basically when another program,
        called a "compiler", interprets human-readable source code into a
        machine-native program (ones and zeros). 
      </para> <para>
        Javascript programs contain multiple lines of code. Typically, when a computer
        executes code, it will start at the top of the file and execute statements,
        line by line, going down the file. As we write more complex programs, there
        are various ways for us to control how Javascript reads our program, but
        for simple programs like our <filename>hello.py</filename>, we can imagine
        Javascript starting at the top of our file and executing each line in order.
        Thus, multiple print statements in our program will print multiple
        lines of text onto our screen.
      </para>
      <section> <title>Dissecting Your First Javascript Program</title>
        <para>
          Lets take a closer look at your first Javascript program. The first line
          looks like this:
          <programlisting> #!/usr/bin/env python </programlisting>
          This line tells the computer that the program is a Javascript program.
          You should remember to put this line at the top of all of your 
          Javascript programs. This type of code which goes into all of your programs
          is known as "Boilerplate" code. Many different languages have some sort
          of boilerplate code; some more complex than others. The next two lines
          look like this:
          <programlisting>
# File: hello.py
# Prints the text "Hello, world!" onto the screen
          </programlisting>
          Note that both this code and the first line of code begin with the '#'
          character. In programmer-speak, this character is usually referred to
          as the "pound" character or a "hash" character. This character has
          special meaning in Javascript. It tells the Javascript interpreter to ignore
          anything else that comes after it in the line. This is known as a 
          <emphasis> comment </emphasis>. Comments are text that are meant tell
          a human reader some information but are ignored by the computer.
        </para> <para>
          Finally, the last line of code in the program is
          <programlisting>
print('Hello, world!')
          </programlisting>
          This is where the real stuff happens: printing text onto the screen.
          The word <function>print</function> is a special command in python that is
          used to print text onto the screen. It is known as a <emphasis>function</emphasis>. Javascript
          comes with hundreds of built-in functions you can use to do a variety
          of stuff. The simplest functions are fairly straight-forward to use:
          Type the name of the function, followed by an open-parentheses '(', 
          followed by any arguments the function needs or expects separated by commas, followed by a close
          paretheses ')'. In our case, the print function needs you to give it something
          to print. In our example, we gave it the string 'Hello, world!' to print.
          We will introduce more functions as you become familiar
          with the language. 
        </para>
      </section>
      <section> <title>Debugging Javascript Programs</title>
        <para>
          Eventually, you will accidentally try to run Javascript programs
          with typos in them. This is totally normal and completely unavoidable.
          Unintentional errors in computer programs are called <emphasis>bugs
          </emphasis>. The process of finding and fixing bugs is called
          <emphasis> debugging </emphasis>.
          Depending on where you make your typos, you may damage your Javascript
          program enough such that Javascript can no longer properly run your program.
          This type of error is called a <emphasis>Syntax Error</emphasis>. Common syntax errors are
          missing parentheses, missing quotation marks, and improperly indented
          code. When Javascript encounters
          a syntax error, it will give you an error message.
        </para> <para>
          Consider the following program:
          <example id="hello_bad.py">
            <title>A Javascript program with a syntax error.</title>
            <programlisting>
<xi:include href="code/hello_bad.py" parse="text"/>
            </programlisting>
          </example>
          When we try to run the program, we get the following output:
          <screen>
            <xi:include href="code/hello_bad.py.output" parse="text" />
          </screen>
          Errors like this may seem daunting at first. Sometimes, the error 
          messages can be cryptic. However, the first two lines indicate that
          the error is possibly at line 7, and even points to a possible location
          with a little tick mark. Can you spot the error there? Generally, syntax 
          errors are on the reported line or sometimes a few lines before.
        </para>
      </section>
      <section> <title> Summary </title>
        <itemizedlist>
          <listitem>Javascript programs typically end in ".py". </listitem>
          <listitem>Javascript comments begin with the character '#'. </listitem>
          <listitem>Use the <function>print</function> function to print text onto the screen.</listitem>
          <listitem>When you encounter error messages, scan the lines reported in the error
                    as well as the lines around the reported error.</listitem>
          <listitem>Use the <function>print</function> function to print text onto the screen.</listitem>
        </itemizedlist>
      </section>
      <section> <title> Terminology </title>
        <para>
          bug, debug, function, comment, source code, <function>print</function>
        </para>
      </section>
      <section> <title>Exercises</title>
        <orderedlist>
          <listitem>
            What is wrong with the following code example?
            <example id="hello_bad2.py"><title>A Javascript Program with a Bug</title>
              <programlisting>
#!/usr/bin/env python

# File: hello_bad2.py
# This program is supposed to print 'Hello, world!' onto the screen, but there
# is a syntax error in it.

print 'Hello, world!')
              </programlisting>
            </example>
          </listitem>
          <listitem>
            <para>
              See if you can write a program to display the following text which contains
              multiple lines.
              <screen>
The quick brown fox
jumped over the lazy dog.
              </screen>
            </para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section>
      <title> A slightly more complex example </title>
      <para>
        Lets take a look at a slightly more complex example which actually
        involves a little calculation.
        <example id="hello_variable.py"><title>A Javascript Program with Variables</title>
          <programlisting>
<xi:include href="code/hello_variable.py" parse="text"/>
          </programlisting>
        </example>
        At the beginning of this example, we see the same type of boilerplate code
        and comments that we saw in our previous example. Then, we see the lines
        <programlisting>
myvar = 10
print(myvar)
        </programlisting>
        These two
      </para>
    </section>
  </section>
  -->

</chapter>

</book>
